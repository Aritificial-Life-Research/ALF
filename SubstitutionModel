# data structure to store information about a substitution model
# Name: name of model
# Params: list of model parameters
#         for custom empirical models: Params[1] should contain a path to a matrix in PAML format
#         for M-series models:  kappa = Params[1]
#                               omega = Params[2] (single value or list)
#                               P     = Params[3] (probabilities of w-class[es]) 
#                               p     = Params[4] (for M8, 1st parameter of beta distribution)
#                               q     = Params[4] (for M8, 2nd parameter of beta distribution)
# BaseFreqs: base frequencies
# NeutralDNA: for nucleotide models specifies whether nonsense mutations should be allowed
# Type: specifies type of model (aa, codon, nucleotide)
# LogPAM1: mutation matrix (or list of mutation matrices)
SubstitutionModel := proc(Name:string, Params:list(anything), BaseFreqs:list(numeric), NeutralDNA:boolean,
                          Type:{'aa','codon','nuc'}, LogPAM1:{matrix(numeric), list(matrix(numeric))}, Blocksize:posint)
    global AF, NewLogPAM1, CodonLogPAM1, CF, YCodonLogPAM1, DNALogPAM1, SEbasedir;
    if nargs = 0 then
        error('too few arguments. need at least a Model name!'): fi:
    if nargs = 1 then
        if Name = 'CPAM' or Name = 'ECM' or Name = 'ECMu' then # CodonPAM model
            CreateCodonMatrices(Name):
            f := copy(CF):
            m := copy(CodonLogPAM1):
            return(noeval(SubstitutionModel(Name, [], f, false, 'codon', m, 3))):
        elif Name = 'GCB' or Name = 'JTT' or Name = 'WAG' or Name = 'LG' then # PAM model with Gonnet matrix
            CreateDayMatrices(Name):
            f := copy(AF);
            m := copy(logPAM1):
            return(noeval(SubstitutionModel(Name, [], f, false, 'aa', m, 1))):
        elif Name = 'JC' then #Jukes-Cantor
            return(SubstitutionModel('TN93', [1,1,1], [0.25,0.25,0.25,0.25], true)):
#        elif Name = 'ECM' then
#            matrixFile := SEbasedir.'/matrices/ecm.dat':
#        elif Name = 'ECMu' then
#            matrixFile := SEbasedir.'/matrices/ecmu.dat':
#        elif Name = 'JTT' then
#            matrixFile := SEbasedir.'/matrices/jtt.dat':
#        elif Name = 'WAG' then
#            matrixFile := SEbasedir.'/matrices/wag.dat':
#        elif Name = 'LG' then
#            matrixFile := SEbasedir.'/matrices/lg.dat':           
        else
            error('too few arguments. please supply necessary model parameters!'):
        fi:
#        if Name = 'ECM' or Name = 'ECMu' or Name = 'CustomC' then
#            res := LoadMatrixFile(matrixFile):
#            CreateCodonMatrices(op(res)):
#            f := copy(CF):
#            m := copy(CodonLogPAM1):
#            noeval(SubstitutionModel(Name, [], f, false, 'codon', m, 3)):
#        else
#            res := LoadMatrixFile(matrixFile):
#            CreateDayMatrices(op(res)):
#            f := copy(AF):
#            m := copy(logPAM1):
#            noeval(SubstitutionModel(Name, [], f, false, 'aa', m, 1)):
#        fi:        
    elif nargs = 2 then # all other empirical models
        if type(Params[1], string) then # assume file name
            if Name = 'CustomC' then
                res := LoadMatrixFile(Params[1]):
                CreateCodonMatrices(op(res)):
                f := copy(CF):
                m := copy(CodonLogPAM1):
                noeval(SubstitutionModel(Name, [], f, false, 'codon', m, 3)):
            elif Name = 'CustomP' then
                res := LoadMatrixFile(matrixFile):
                CreateDayMatrices(op(res)):
                f := copy(AF):
                printf('AF: %a\n', AF):
                m := copy(logPAM1):
                noeval(SubstitutionModel(Name, [], f, false, 'aa', m, 1)):
            else
                error('unknown model: '.Name):
            fi:
        else
            error('too few parameters for model '.Name.'!'):
        fi:
    elif nargs = 3 then # parametric codon models
        if Name[1] <> 'M' then
            error('specify whether simulation should assume neutral dna'):
        else
            if Name = 'M8' then
                m := CreateCodonModelMatrices(Name, BaseFreqs, Params[1], Params[2], Params[3], Params[4], Params[5]):
            elif Name = 'M0' then
                m := CreateCodonModelMatrices(Name, BaseFreqs, Params[1], Params[2]):
            else
                m := CreateCodonModelMatrices(Name, BaseFreqs, Params[1], Params[2], Params[3]):
            fi:
            f := copy(BaseFreqs):
#            m := copy(YCodonLogPAM1):
            noeval(SubstitutionModel(Name, Params, f, false, 'codon', m, 3)):
        fi:
    else # nucleotide models
        CreateNucleotideMatrix(Name, BaseFreqs, Params):
        f := copy(BaseFreqs):
        m := copy(DNALogPAM1):
        noeval(SubstitutionModel(Name, Params, f, NeutralDNA, 'nuc', m, If(NeutralDNA, 1, 3))):
    fi:
end:

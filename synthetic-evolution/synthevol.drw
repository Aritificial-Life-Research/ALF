# synthetic evolution - main program
#
# Daniel Margadant, Sereina Riniker, CBRG, 2005

# main data structure:
# evolution[organism#, gene#][mutRate, aa sequence, desc, id, organism, dna]
#                             1        2            3     4   5         6
#                  mutRate = [domain start, domain end, mutrate], ...]




# initialisation (do not change, parameters are in separate file)
livingOrgs := 1;
evolTime := 0;
treeData := []:
treeData := append(treeData, []):   
treeEvo := '';
totD := 0; totL := 0;
spec := [];                   
GCratio := [];                      
GCplus := GCBiasMatrix(50);
GCminus := GCBiasMatrix(-50);


# calculation of the needed iteration steps
rate := max(geneDuplRate, geneLossRate, lgtRate, lgtGRate,
    aaGainRate, aaLossRate, 1);
if realseed = true then
    DB := ReadDb(realorganism);
    Nprot := DB[TotEntries];
    Naa := round(avg(seq(length(SearchTag('SEQ', Entry(e))), e=1..Nprot)));
else
    Naa := aaStart;
    Nprot := protStart;
fi;
maxSteps := rate * max(Naa, Nprot);
specRate := cSpecies / maxSteps;

# loads real genome as first organism (if realseed is selected)
if realseed = true then # generates the first organism with real data
    evolution := [];
    evolution := append(evolution, CreateArray(1..DB[TotEntries], 1..6)):
    for i to DB[TotEntries] do
        protseq := SearchTag('SEQ', Entry(i));
        # switch for real domainfile
        evolution[1, i, 1] := makeAreas(length(protseq), areas, 
    		mutRate, maxSteps);
        evolution[1, i, 2] := protseq;
        evolution[1, i, 3] := '1';
        evolution[1, i, 4] := i;
        evolution[1, i, 5] := '1';
        evolution[1, i, 6] := SearchTag('DNA', Entry(i));
    od:

# creates the first organism (if realseed is not selected)
else	
    evolution := []:
    evolution := append(evolution, CreateArray(1..protStart, 1..6)):
    for i to protStart do
        evolution[1, i, 1] := makeAreas(aaStart, areas, mutRate, maxSteps);
        evolution[1, i, 6] := Rand(CodingDNA(3 * aaStart));
        evolution[1, i, 2] := ProteinSeq(evolution[1, i, 6]);
        evolution[1, i, 3] := '1';
        evolution[1, i, 4] := i;
        evolution[1, i, 5] := '1';
    od:
fi;

# definition of the GC amelioration for the first organism
gcrat := calGCcont(evolution[1]);
gcw := Rand(30..70);
if gcrat > gcw then
    GCratio := append(GCratio, [gcw, 'minus']);        
elif gcrat < gcw then
    GCratio := append(GCratio, [gcw, 'plus']);
else GCratio := append(GCratio, [gcw, '0']);
fi;


# logfile header 
lastSpeciation := 1:
print('\n\nEvolution!\n\n');
OpenWriting(wdir.'logfile.txt'); 
lprint('Synthetic evolution\n-------------------\n');
printf('%i iteration steps\n', maxSteps);
printf('first organism (%s): %i proteins with %i aa (average)\n', 
    If(realseed = true, 'biological sequences', 'artificial sequences'), 
    Nprot, Naa);
printf('Mutation rate: %.2f, Speciation rate: %.2f\n', 
    mutRate, specRate);
printf('Gene duplication rate: %.2f, Gene loss rate: %.2f\n', 
    geneDuplRate, geneLossRate);
printf('LGT rate: %.2f, LGT rate for groups: %.2f, LGT group size: %.2f\n', 
    lgtRate, lgtGRate, lgtGSize );
printf('aa gain rate: %.3f, aa loss rate= %.3f\n\n', aaGainRate, aaLossRate);
lprint('mutation rates: g <genenumber> : <domain 1>, <domain 2>, ...');
for i to length(evolution[1]) do
    printf('g %3i : ', i);
    for j to length(evolution[1, i, 1]) do
        printf('%.f ', evolution[1, i, 1, j, 3] * maxSteps);
    od;
    printf('\n');
od;
lprint();
    
    
# main evolution loop 
while evolTime <= maxSteps do
    evolTime := evolTime + 1:

    # loop over all current existing organisms
    for j to livingOrgs do
        
        # factor for adjusting the geneLoss-, geneDupl- and lgtRate
        Gfactor := length(evolution[j]) / maxSteps; 
        
        # performs mutation and GC amelioration
        AAfactor := 0;
        for k to length(evolution[j]) do
            # sums the total number of aa in the organism
            AAfactor := AAfactor + length(evolution[j, k, 2]);   
            seqTot := '';
            # loop over all domains for protein k
            for i to length(evolution[j, k, 1]) do
                sequence := evolution[j, k, 6][(evolution[j, k, 1][i, 1] 
                    * 3 - 2)..evolution[j, k, 1][i, 2] * 3];
                if GCratio[j, 2] = 'plus' then
                    sequence := CodonMutate(sequence, 
                        evolution[j, k, 1][i, 3], GCplus);
                elif GCratio[j, 2] = 'minus' then
                    sequence := CodonMutate(sequence,                         
                        evolution[j, k, 1][i, 3], GCminus);
                fi;
                seqTot := seqTot.string(sequence);
            od;
            evolution[j, k, 6] := string(seqTot);
            evolution[j, k, 2] := ProteinSeq(evolution[j, k, 6]);
        od; 

        # factor for adjusting the aaGainRate and the aaLossRate
        AAfactor := AAfactor / maxSteps;	

        # aa gain
        # dna_source is dna domain in gene k of organism j
        if 100 * Rand() < (aaGainRate * AAfactor) then
            k := trunc(Rand() * length(evolution[j])) + 1;
            dna_source := (trunc(Rand() * length(evolution[j, k, 2])) 
                + 1) * 3;
            dna_value := IntToCodon(trunc(Rand() * 20) + 1)[1];
            if dna_source = 3 then
                evolution[j, k, 6] := dna_value.string(evolution[j, k, 6]);
            elif dna_source = length(evolution[j, k, 6]) then
                evolution[j, k, 6] := string(evolution[j, k, 6]).dna_value;
            else 
                evolution[j, k, 6] := string(evolution[j, k,6])
                    [1..dna_source].dna_value.string(evolution[j, k, 6])
                    [dna_source + 1..-1];
            fi;
            evolution[j, k, 2] := ProteinSeq(evolution[j, k, 6]);
            evolution[j, k, 1] := updateBorder(evolution[j, k, 1], 
                (dna_source / 3), 'insert'); 
        fi;


        # aa loss 
        # dna_source is dna domain in gene k of organism j
        if 100 * Rand() < (aaLossRate * AAfactor) then
            k := trunc(Rand() * length(evolution[j])) + 1;
            dna_source := (trunc(Rand() * length(evolution[j, k, 2])) 
                + 1) * 3;
            if dna_source = 3 then
                evolution[j, k, 6] := string(evolution[j, k, 6])[4..-1];
            elif dna_source = length(evolution[j, k, 6]) then
                evolution[j, k, 6] := string(evolution[j, k, 6])[1..-4];
            else 
                evolution[j, k, 6] := 
                    string(evolution[j, k, 6])[1..dna_source - 3].
                    string(evolution[j, k, 6])[dna_source + 1..-1];
            fi;
            evolution[j, k, 2] := ProteinSeq(evolution[j, k, 6]);
            evolution[j, k, 1] := updateBorder(evolution[j, k, 1],
                (dna_source / 3), 'delet');
        fi;


        # gene duplication
        if 100 * Rand() < (geneDuplRate * Gfactor) then
            geneSource := trunc(Rand() * length(evolution[j])) + 1;
                evolution[j] := append(evolution[j], 
                copy(evolution[j, geneSource]));
            evolution[j, -1, 3] := evolution[j, -1, 3].'-('.copy(evolution
                [j, geneSource, 4]).'D'.evolTime.')'.j;
                evolution[j, -1, 4] := copy(evolution[j, -2, 4]) + 1;
            printf('time %0004i: gene duplication in organism %i with gene'.
                ' %i, now gene %i\n', evolTime, j, evolution[j, geneSource, 4],
                evolution[j, -1, 4]);
            Gfactor := length(evolution[j]) / maxSteps; 
        fi;
        
        # gene loss	    
        if 100 * Rand() < (geneLossRate * Gfactor) then
            geneSource := trunc(Rand() * length(evolution[j])) + 1;
            printf ('time %0004i: gene loss in organism %i with gene %i\n', 
                evolTime, j, evolution[j, geneSource, 4]);
            if geneSource = 1 then
                evolution[j] := evolution[j][2..-1];
            elif geneSource = length(evolution[j]) then
                evolution[j] := evolution[j][1..-2];
            else 
                evolution[j] := [op(evolution[j][1..geneSource - 1]),
                    op(evolution[j][geneSource + 1..-1])];
            fi;
            Gfactor := length(evolution[j]) / maxSteps; 
        fi;
        
        # lateral gene transfer of single genes
        if 100 * Rand() < (lgtRate * Gfactor) and livingOrgs > 1 then
            
            # lgt - orthologous replacement
            if 100 * Rand() < orthRep then
                # finds donor (recipient is current organism j)
                donors := {seq(i, i = 1..livingOrgs)} minus {j}; 
                orgDonor := Rand(donors);
                gd1 := {seq(evolution[orgDonor, i, 4], i=1..min(protStart, 
                    length(evolution[orgDonor])))} minus
                    {seq(i, i= protStart..length(evolution[orgDonor]))};
                gd2 := {seq(evolution[j, i, 4], i=1..min(protStart,
                    length(evolution[j])))} minus 
                    {seq(i, i= protStart..length(evolution[j]))};
                gD := Rand(gd1 intersect gd2);
                for l to length(evolution[j]) do
                    if evolution[j, l, 4] = gD then
                        geneSource := l;
                        break;
                    fi;
                od;
                for l to length(evolution[orgDonor]) do
                    if evolution[orgDonor, l, 4] = gD then
                        geneDonor := l;
                        break;
                    fi;
                od;
                # copies entry and updates description
                evolution[j] := append(evolution[j], 
                    copy(evolution[orgDonor, geneDonor]));
                evolution[j, -1, 3] := evolution[j, -1, 3].'-'.orgDonor.'('.
                    copy(evolution[orgDonor, geneDonor, 4]).'Lo'.evolTime.')'.j;
                    evolution[j, -1, 4] := copy(evolution[j, -2, 4]) + 1;
                evolution[j, -1, 5] := copy(evolution[j, -2, 5]);
                printf ('time %0004i: lgt from organism %i with gene %i to '.
                    'organism %i, now gene %i\n', evolTime, orgDonor, 
                    evolution[orgDonor, geneDonor, 4], j, evolution[j, -1, 4]);
                printf('\torthologues replacement, gene %i in organism %i '.
                    'deleted\n', evolution[j, geneSource, 4], j);
                # deletes own version of gene in recipient
                if geneSource = 1 then
                    evolution[j] := evolution[j][2..-1];
                elif geneSource = length(evolution[j]) then
                    evolution[j] := evolution[j][1..-2];
                else
                    evolution[j] := [op(evolution[j][1..geneSource - 1]),
                    op(evolution[j][geneSource + 1..-1])];
                fi;
            
            # lgt - novel gene acquisition
            else
                # finds donor (recipient is current organism j)
                donors := {seq(i, i = 1..livingOrgs)} minus {j};
                orgDonor := Rand(donors);
                geneDonor := trunc(Rand() * 
                    length(evolution[orgDonor])) + 1;
                # copies entry and updates description
                evolution[j] := append(evolution[j], 
                    copy(evolution[orgDonor, geneDonor]));
                evolution[j, -1, 3] := evolution[j, -1, 3].'-'.orgDonor.'('.
                    copy(evolution[orgDonor, geneDonor, 4]).'L'.evolTime.')'.j;
                evolution[j, -1, 4] := copy(evolution[j, -2, 4]) + 1;
                evolution[j, -1, 5] := copy(evolution[j, -2, 5]);
                printf ('time %0004i: lgt from organism %i with gene %i '.
                    'to organism %i, now gene %i\n', evolTime, orgDonor, 
                    evolution[orgDonor, geneDonor, 4], j, evolution[j, -1, 4]);
                Gfactor := length(evolution[j]) / maxSteps; 
            fi;
        fi;
        
        # lateral gene transfer	of multiple genes
        if 100 * Rand() < (lgtGRate * Gfactor) and livingOrgs > 1 then 
            # finds donor (recipient is current organism j)
            donors := {seq(i, i = 1..livingOrgs)} minus {j};
            orgDonor := Rand(donors);
            geneDonor := trunc(Rand() * (length(evolution[orgDonor]) - 
                lgtGSize)) + 1;	
            # copies entries for lgtGsize proteins
            for i to lgtGSize do
                evolution[j] := append(evolution[j], 
                    copy(evolution[orgDonor, geneDonor]));
                evolution[j, -1, 3] := 
                    evolution[j, -1, 3].'-'.orgDonor.'('.copy(evolution
                    [orgDonor, geneDonor, 4]).'L'.evolTime.')'.j;
                evolution[j, -1, 4] := copy(evolution[j, -2, 4]) + 1;
                evolution[j, -1, 5] := copy(evolution[j, -2, 5]);
                printf ('time %0004i: lgt from organism %i with gene %i '.
                    'to organism %i, now gene %i\n', 
                evolTime, orgDonor, evolution[orgDonor, geneDonor, 4],
                    j, evolution[j, -1, 4]);
                geneDonor := geneDonor + 1;
            od;
            Gfactor := length(evolution[j]) / maxSteps;
        fi;
    od;

        
    # speciation
    if Rand() < specRate then
        # organism which will have offspring is randomly chosen
        orgSource := trunc(Rand() * livingOrgs) + 1;
        evolution := append(evolution, copy(evolution[orgSource]));
        livingOrgs := livingOrgs + 1;
        # updates history in gene descriptions
        for l to length(evolution[livingOrgs]) do
            evolution[livingOrgs, l, 5] :=	
                evolution[orgSource, l, 5].'-('.evolTime.')'.livingOrgs;
            evolution[livingOrgs, l, 3] :=
                evolution[orgSource, l, 3].'-('.evolTime.')'.livingOrgs;
        od;
        spec := append(spec, ['SE'.sprintf('%03i', orgSource), 
            'SE'.sprintf('%03i', livingOrgs), evolTime]);
        # defines new GC amelioration direction for new species
        gcrat := calGCcont(evolution[livingOrgs]); 
        gcw := Rand(30..70);
        if gcrat > gcw then
            GCratio := append(GCratio, [gcw, 'minus']);
        elif gcrat < gcw then
            GCratio := append(GCratio, [gcw, 'plus']);
        else GCratio := append(GCratio, [gcw, '0']);
        fi;
        # checks if GC content is reached and updates GC amelioration direction
        for i to (livingOrgs - 1) do
            if calGCcont(evolution[i]) > GCratio[i,1] then
                GCratio[i,2] := 'minus';
            elif calGCcont(evolution[i]) < GCratio[i,1] then
                GCratio[i,2] := 'plus';
            else
                GCratio[i,2] := '0';
            fi;
        od;
        specRate := (cSpecies-livingOrgs) / (maxSteps-evolTime);
        # creates a new leaf in the real tree
        treeData := append(treeData, []);
        d := evolTime;
        if treeData[orgSource] = [] then
            treeEvo[] := Tree(Leaf(orgSource, d),
                d, Leaf(livingOrgs, d));
        else
            treeEvo[op(treeData[orgSource])] := Tree(Leaf(orgSource, d),
                d, Leaf(livingOrgs, d));
        fi;
        treeData[livingOrgs] := append(copy(treeData[orgSource]), Right);
        treeData[orgSource] := append(copy(treeData[orgSource]), Left);
        lastSpeciation := evolTime;
        printf ('time %0004i: speciation event of organism %i to organism '.
            '%i, GC content: %.2f%%\n', evolTime, orgSource, livingOrgs, gcrat);
        OpenWriting(previous);
        printf('species %i was created at time %i\n', livingOrgs, evolTime);
    	DBoutAnc(evolution[livingOrgs], orgSource, livingOrgs, evolTime);
        OpenAppending(wdir.'logfile.txt');
    fi;
od:
OpenWriting(previous);
lprint('main calculation finished');


# saves real tree
for i to livingOrgs do
    treeEvo[op(treeData[i])]:=Leaf('SE'.sprintf('%03d', i), evolTime); 
od:
DrawTree(treeEvo, BisectLines, OrderLeaves=LeftHeavy, Legend, 
    Title = 'synthetic evolution');
TimedCallSystem('mv temp.ps RealTree.ps', 2);
OpenWriting('RealTree.drw');
printf('RealTree := %a;\n', treeEvo);
OpenWriting(previous);
printf('\n\nevolution was going on for %i iteration steps\n', evolTime):

# calculates total number of lgt and duplication
for i to livingOrgs do
    for j to length(evolution[i]) do
	if SearchString('D', evolution[i, j, 3]) > -1 then
	    totD := totD + 1;
	fi;
	if SearchString('L', evolution[i, j, 3]) > -1 then
	    totL := totL + 1;
	fi;
    od:
od:

# logfile footer, DB output, GenomeSummaries
OpenAppending(wdir.'logfile.txt');
printf('\n\n\n\%i species generated\n', livingOrgs);
printf('%.0f gene duplications and %.0f lgt events\n', totD, totL);
printf('\nGC amelioration:');
printf('\ni\ttarget GC content\tinitialized GC ratio'); 
for i to length(GCratio) do
    printf('\norganism %i\t%.2f\t\t%.2f', 
	i, GCratio[i,1], calGCcont(evolution[i])); 
od;
OpenWriting(previous);
DBout();
OpenWriting(wdir.'Summaries.drw');
printf('GenomeSummaries := table():\ngenomes := []:\n');
for i to livingOrgs do
    OpenWriting(previous);
    orgname := sprintf('SE%03d', i):
    DB := ReadDb(wdir.dbdir.orgname.'.db'):
    OpenAppending(wdir.'Summaries.drw');
    printf('genomes := append(genomes, %s):\n', orgname):
    printf('GenomeSummaries[%s] :=', orgname );
    dprint(copy(GenomeSummary(DB)));
    printf(':\n');
od;
OpenWriting(previous);
